// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pckt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pckt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PBMSG {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Cpu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Cpu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Mem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Mem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Net_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Net_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Disk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Disk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_CallFreq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_CallFreq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pckt_2eproto() {
  protobuf_AddDesc_pckt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pckt.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, callfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, zonename_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_Cpu_descriptor_ = Packet_descriptor_->nested_type(0);
  static const int Packet_Cpu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Cpu, core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Cpu, usage_),
  };
  Packet_Cpu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Cpu_descriptor_,
      Packet_Cpu::default_instance_,
      Packet_Cpu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Cpu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Cpu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Cpu));
  Packet_Mem_descriptor_ = Packet_descriptor_->nested_type(1);
  static const int Packet_Mem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, rss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, physcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, swap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, swapcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, physmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, pp_kernel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, freemem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, nalloc_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, nfree_calls_),
  };
  Packet_Mem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Mem_descriptor_,
      Packet_Mem::default_instance_,
      Packet_Mem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Mem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Mem));
  Packet_Net_descriptor_ = Packet_descriptor_->nested_type(2);
  static const int Packet_Net_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, obytes64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, rbytes64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, opackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, ipackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, oerrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, ierrors_),
  };
  Packet_Net_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Net_descriptor_,
      Packet_Net::default_instance_,
      Packet_Net_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Net, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Net));
  Packet_Disk_descriptor_ = Packet_descriptor_->nested_type(3);
  static const int Packet_Disk_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, nread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, nwritten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, wtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, rlentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, wlentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, harderror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, softerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, tranerror_),
  };
  Packet_Disk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Disk_descriptor_,
      Packet_Disk::default_instance_,
      Packet_Disk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Disk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Disk));
  Packet_Process_descriptor_ = Packet_descriptor_->nested_type(4);
  static const int Packet_Process_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, execname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, cpu_),
  };
  Packet_Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Process_descriptor_,
      Packet_Process::default_instance_,
      Packet_Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Process));
  Packet_CallFreq_descriptor_ = Packet_descriptor_->nested_type(5);
  static const int Packet_CallFreq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_CallFreq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_CallFreq, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_CallFreq, value_),
  };
  Packet_CallFreq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_CallFreq_descriptor_,
      Packet_CallFreq::default_instance_,
      Packet_CallFreq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_CallFreq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_CallFreq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_CallFreq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pckt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Cpu_descriptor_, &Packet_Cpu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Mem_descriptor_, &Packet_Mem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Net_descriptor_, &Packet_Net::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Disk_descriptor_, &Packet_Disk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Process_descriptor_, &Packet_Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_CallFreq_descriptor_, &Packet_CallFreq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pckt_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete Packet_Cpu::default_instance_;
  delete Packet_Cpu_reflection_;
  delete Packet_Mem::default_instance_;
  delete Packet_Mem_reflection_;
  delete Packet_Net::default_instance_;
  delete Packet_Net_reflection_;
  delete Packet_Disk::default_instance_;
  delete Packet_Disk_reflection_;
  delete Packet_Process::default_instance_;
  delete Packet_Process_reflection_;
  delete Packet_CallFreq::default_instance_;
  delete Packet_CallFreq_reflection_;
}

void protobuf_AddDesc_pckt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npckt.proto\022\005PBMSG\"\335\007\n\006Packet\022\014\n\004name\030\001"
    " \002(\t\022\014\n\004time\030\002 \002(\004\022\r\n\005ticks\030\003 \001(\r\022\017\n\007thr"
    "eads\030\004 \001(\r\022\021\n\tprocesses\030\005 \001(\r\022\036\n\003cpu\030\006 \003"
    "(\0132\021.PBMSG.Packet.Cpu\022\036\n\003mem\030\007 \003(\0132\021.PBM"
    "SG.Packet.Mem\022\036\n\003net\030\010 \003(\0132\021.PBMSG.Packe"
    "t.Net\022 \n\004disk\030\t \003(\0132\022.PBMSG.Packet.Disk\022"
    "&\n\007process\030\n \003(\0132\025.PBMSG.Packet.Process\022"
    "(\n\010callfreq\030\013 \003(\0132\026.PBMSG.Packet.CallFre"
    "q\022\020\n\010zonename\030\014 \003(\t\032\"\n\003Cpu\022\014\n\004core\030\001 \001(\r"
    "\022\r\n\005usage\030\002 \001(\r\032\242\001\n\003Mem\022\013\n\003rss\030\001 \001(\004\022\017\n\007"
    "physcap\030\002 \001(\004\022\014\n\004swap\030\003 \001(\004\022\017\n\007swapcap\030\004"
    " \001(\004\022\017\n\007physmem\030\005 \001(\004\022\021\n\tpp_kernel\030\006 \001(\004"
    "\022\017\n\007freemem\030\007 \001(\004\022\024\n\014nalloc_calls\030\010 \001(\004\022"
    "\023\n\013nfree_calls\030\t \001(\004\032\201\001\n\003Net\022\020\n\010instance"
    "\030\001 \001(\t\022\020\n\010obytes64\030\002 \001(\004\022\020\n\010rbytes64\030\003 \001"
    "(\004\022\020\n\010opackets\030\004 \001(\004\022\020\n\010ipackets\030\005 \001(\004\022\017"
    "\n\007oerrors\030\006 \001(\r\022\017\n\007ierrors\030\007 \001(\r\032\323\001\n\004Dis"
    "k\022\020\n\010instance\030\001 \002(\t\022\r\n\005nread\030\002 \001(\004\022\020\n\010nw"
    "ritten\030\003 \001(\004\022\r\n\005reads\030\004 \001(\r\022\016\n\006writes\030\005 "
    "\001(\r\022\r\n\005rtime\030\006 \001(\004\022\r\n\005wtime\030\007 \001(\004\022\020\n\010rle"
    "ntime\030\010 \001(\004\022\020\n\010wlentime\030\t \001(\004\022\021\n\tharderr"
    "or\030\n \001(\r\022\021\n\tsofterror\030\013 \001(\r\022\021\n\ttranerror"
    "\030\014 \001(\r\032D\n\007Process\022\013\n\003pid\030\001 \001(\r\022\020\n\010execna"
    "me\030\002 \001(\t\022\r\n\005usage\030\003 \001(\r\022\013\n\003cpu\030\004 \001(\r\0325\n\010"
    "CallFreq\022\014\n\004name\030\001 \002(\t\022\014\n\004time\030\002 \001(\004\022\r\n\005"
    "value\030\003 \001(\r", 1011);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pckt.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  Packet_Cpu::default_instance_ = new Packet_Cpu();
  Packet_Mem::default_instance_ = new Packet_Mem();
  Packet_Net::default_instance_ = new Packet_Net();
  Packet_Disk::default_instance_ = new Packet_Disk();
  Packet_Process::default_instance_ = new Packet_Process();
  Packet_CallFreq::default_instance_ = new Packet_CallFreq();
  Packet::default_instance_->InitAsDefaultInstance();
  Packet_Cpu::default_instance_->InitAsDefaultInstance();
  Packet_Mem::default_instance_->InitAsDefaultInstance();
  Packet_Net::default_instance_->InitAsDefaultInstance();
  Packet_Disk::default_instance_->InitAsDefaultInstance();
  Packet_Process::default_instance_->InitAsDefaultInstance();
  Packet_CallFreq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pckt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pckt_2eproto {
  StaticDescriptorInitializer_pckt_2eproto() {
    protobuf_AddDesc_pckt_2eproto();
  }
} static_descriptor_initializer_pckt_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Packet_Cpu::kCoreFieldNumber;
const int Packet_Cpu::kUsageFieldNumber;
#endif  // !_MSC_VER

Packet_Cpu::Packet_Cpu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Cpu::InitAsDefaultInstance() {
}

Packet_Cpu::Packet_Cpu(const Packet_Cpu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Cpu::SharedCtor() {
  _cached_size_ = 0;
  core_ = 0u;
  usage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Cpu::~Packet_Cpu() {
  SharedDtor();
}

void Packet_Cpu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Cpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Cpu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Cpu_descriptor_;
}

const Packet_Cpu& Packet_Cpu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_Cpu* Packet_Cpu::default_instance_ = NULL;

Packet_Cpu* Packet_Cpu::New() const {
  return new Packet_Cpu;
}

void Packet_Cpu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    core_ = 0u;
    usage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Cpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 core = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_)));
          set_has_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usage;
        break;
      }

      // optional uint32 usage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
          set_has_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Cpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 core = 1;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->core(), output);
  }

  // optional uint32 usage = 2;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Cpu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 core = 1;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->core(), target);
  }

  // optional uint32 usage = 2;
  if (has_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Cpu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 core = 1;
    if (has_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->core());
    }

    // optional uint32 usage = 2;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Cpu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Cpu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Cpu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Cpu::MergeFrom(const Packet_Cpu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_core()) {
      set_core(from.core());
    }
    if (from.has_usage()) {
      set_usage(from.usage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Cpu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Cpu::CopyFrom(const Packet_Cpu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Cpu::IsInitialized() const {

  return true;
}

void Packet_Cpu::Swap(Packet_Cpu* other) {
  if (other != this) {
    std::swap(core_, other->core_);
    std::swap(usage_, other->usage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Cpu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Cpu_descriptor_;
  metadata.reflection = Packet_Cpu_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Mem::kRssFieldNumber;
const int Packet_Mem::kPhyscapFieldNumber;
const int Packet_Mem::kSwapFieldNumber;
const int Packet_Mem::kSwapcapFieldNumber;
const int Packet_Mem::kPhysmemFieldNumber;
const int Packet_Mem::kPpKernelFieldNumber;
const int Packet_Mem::kFreememFieldNumber;
const int Packet_Mem::kNallocCallsFieldNumber;
const int Packet_Mem::kNfreeCallsFieldNumber;
#endif  // !_MSC_VER

Packet_Mem::Packet_Mem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Mem::InitAsDefaultInstance() {
}

Packet_Mem::Packet_Mem(const Packet_Mem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Mem::SharedCtor() {
  _cached_size_ = 0;
  rss_ = GOOGLE_ULONGLONG(0);
  physcap_ = GOOGLE_ULONGLONG(0);
  swap_ = GOOGLE_ULONGLONG(0);
  swapcap_ = GOOGLE_ULONGLONG(0);
  physmem_ = GOOGLE_ULONGLONG(0);
  pp_kernel_ = GOOGLE_ULONGLONG(0);
  freemem_ = GOOGLE_ULONGLONG(0);
  nalloc_calls_ = GOOGLE_ULONGLONG(0);
  nfree_calls_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Mem::~Packet_Mem() {
  SharedDtor();
}

void Packet_Mem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Mem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Mem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Mem_descriptor_;
}

const Packet_Mem& Packet_Mem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_Mem* Packet_Mem::default_instance_ = NULL;

Packet_Mem* Packet_Mem::New() const {
  return new Packet_Mem;
}

void Packet_Mem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rss_ = GOOGLE_ULONGLONG(0);
    physcap_ = GOOGLE_ULONGLONG(0);
    swap_ = GOOGLE_ULONGLONG(0);
    swapcap_ = GOOGLE_ULONGLONG(0);
    physmem_ = GOOGLE_ULONGLONG(0);
    pp_kernel_ = GOOGLE_ULONGLONG(0);
    freemem_ = GOOGLE_ULONGLONG(0);
    nalloc_calls_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nfree_calls_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Mem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rss_)));
          set_has_rss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_physcap;
        break;
      }

      // optional uint64 physcap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physcap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physcap_)));
          set_has_physcap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_swap;
        break;
      }

      // optional uint64 swap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swap_)));
          set_has_swap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_swapcap;
        break;
      }

      // optional uint64 swapcap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swapcap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swapcap_)));
          set_has_swapcap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_physmem;
        break;
      }

      // optional uint64 physmem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physmem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physmem_)));
          set_has_physmem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pp_kernel;
        break;
      }

      // optional uint64 pp_kernel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pp_kernel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pp_kernel_)));
          set_has_pp_kernel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_freemem;
        break;
      }

      // optional uint64 freemem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freemem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freemem_)));
          set_has_freemem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nalloc_calls;
        break;
      }

      // optional uint64 nalloc_calls = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nalloc_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nalloc_calls_)));
          set_has_nalloc_calls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nfree_calls;
        break;
      }

      // optional uint64 nfree_calls = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nfree_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfree_calls_)));
          set_has_nfree_calls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Mem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 rss = 1;
  if (has_rss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rss(), output);
  }

  // optional uint64 physcap = 2;
  if (has_physcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->physcap(), output);
  }

  // optional uint64 swap = 3;
  if (has_swap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->swap(), output);
  }

  // optional uint64 swapcap = 4;
  if (has_swapcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->swapcap(), output);
  }

  // optional uint64 physmem = 5;
  if (has_physmem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->physmem(), output);
  }

  // optional uint64 pp_kernel = 6;
  if (has_pp_kernel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pp_kernel(), output);
  }

  // optional uint64 freemem = 7;
  if (has_freemem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->freemem(), output);
  }

  // optional uint64 nalloc_calls = 8;
  if (has_nalloc_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->nalloc_calls(), output);
  }

  // optional uint64 nfree_calls = 9;
  if (has_nfree_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->nfree_calls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Mem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 rss = 1;
  if (has_rss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rss(), target);
  }

  // optional uint64 physcap = 2;
  if (has_physcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->physcap(), target);
  }

  // optional uint64 swap = 3;
  if (has_swap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->swap(), target);
  }

  // optional uint64 swapcap = 4;
  if (has_swapcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->swapcap(), target);
  }

  // optional uint64 physmem = 5;
  if (has_physmem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->physmem(), target);
  }

  // optional uint64 pp_kernel = 6;
  if (has_pp_kernel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pp_kernel(), target);
  }

  // optional uint64 freemem = 7;
  if (has_freemem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->freemem(), target);
  }

  // optional uint64 nalloc_calls = 8;
  if (has_nalloc_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->nalloc_calls(), target);
  }

  // optional uint64 nfree_calls = 9;
  if (has_nfree_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->nfree_calls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Mem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rss = 1;
    if (has_rss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rss());
    }

    // optional uint64 physcap = 2;
    if (has_physcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->physcap());
    }

    // optional uint64 swap = 3;
    if (has_swap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->swap());
    }

    // optional uint64 swapcap = 4;
    if (has_swapcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->swapcap());
    }

    // optional uint64 physmem = 5;
    if (has_physmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->physmem());
    }

    // optional uint64 pp_kernel = 6;
    if (has_pp_kernel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pp_kernel());
    }

    // optional uint64 freemem = 7;
    if (has_freemem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freemem());
    }

    // optional uint64 nalloc_calls = 8;
    if (has_nalloc_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nalloc_calls());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 nfree_calls = 9;
    if (has_nfree_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfree_calls());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Mem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Mem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Mem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Mem::MergeFrom(const Packet_Mem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rss()) {
      set_rss(from.rss());
    }
    if (from.has_physcap()) {
      set_physcap(from.physcap());
    }
    if (from.has_swap()) {
      set_swap(from.swap());
    }
    if (from.has_swapcap()) {
      set_swapcap(from.swapcap());
    }
    if (from.has_physmem()) {
      set_physmem(from.physmem());
    }
    if (from.has_pp_kernel()) {
      set_pp_kernel(from.pp_kernel());
    }
    if (from.has_freemem()) {
      set_freemem(from.freemem());
    }
    if (from.has_nalloc_calls()) {
      set_nalloc_calls(from.nalloc_calls());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nfree_calls()) {
      set_nfree_calls(from.nfree_calls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Mem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Mem::CopyFrom(const Packet_Mem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Mem::IsInitialized() const {

  return true;
}

void Packet_Mem::Swap(Packet_Mem* other) {
  if (other != this) {
    std::swap(rss_, other->rss_);
    std::swap(physcap_, other->physcap_);
    std::swap(swap_, other->swap_);
    std::swap(swapcap_, other->swapcap_);
    std::swap(physmem_, other->physmem_);
    std::swap(pp_kernel_, other->pp_kernel_);
    std::swap(freemem_, other->freemem_);
    std::swap(nalloc_calls_, other->nalloc_calls_);
    std::swap(nfree_calls_, other->nfree_calls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Mem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Mem_descriptor_;
  metadata.reflection = Packet_Mem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Net::kInstanceFieldNumber;
const int Packet_Net::kObytes64FieldNumber;
const int Packet_Net::kRbytes64FieldNumber;
const int Packet_Net::kOpacketsFieldNumber;
const int Packet_Net::kIpacketsFieldNumber;
const int Packet_Net::kOerrorsFieldNumber;
const int Packet_Net::kIerrorsFieldNumber;
#endif  // !_MSC_VER

Packet_Net::Packet_Net()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Net::InitAsDefaultInstance() {
}

Packet_Net::Packet_Net(const Packet_Net& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Net::SharedCtor() {
  _cached_size_ = 0;
  instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  obytes64_ = GOOGLE_ULONGLONG(0);
  rbytes64_ = GOOGLE_ULONGLONG(0);
  opackets_ = GOOGLE_ULONGLONG(0);
  ipackets_ = GOOGLE_ULONGLONG(0);
  oerrors_ = 0u;
  ierrors_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Net::~Packet_Net() {
  SharedDtor();
}

void Packet_Net::SharedDtor() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Net::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Net::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Net_descriptor_;
}

const Packet_Net& Packet_Net::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_Net* Packet_Net::default_instance_ = NULL;

Packet_Net* Packet_Net::New() const {
  return new Packet_Net;
}

void Packet_Net::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance()) {
      if (instance_ != &::google::protobuf::internal::kEmptyString) {
        instance_->clear();
      }
    }
    obytes64_ = GOOGLE_ULONGLONG(0);
    rbytes64_ = GOOGLE_ULONGLONG(0);
    opackets_ = GOOGLE_ULONGLONG(0);
    ipackets_ = GOOGLE_ULONGLONG(0);
    oerrors_ = 0u;
    ierrors_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Net::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obytes64;
        break;
      }

      // optional uint64 obytes64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obytes64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obytes64_)));
          set_has_obytes64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rbytes64;
        break;
      }

      // optional uint64 rbytes64 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rbytes64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rbytes64_)));
          set_has_rbytes64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opackets;
        break;
      }

      // optional uint64 opackets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opackets_)));
          set_has_opackets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ipackets;
        break;
      }

      // optional uint64 ipackets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ipackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipackets_)));
          set_has_ipackets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oerrors;
        break;
      }

      // optional uint32 oerrors = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oerrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oerrors_)));
          set_has_oerrors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ierrors;
        break;
      }

      // optional uint32 ierrors = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ierrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ierrors_)));
          set_has_ierrors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Net::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instance(), output);
  }

  // optional uint64 obytes64 = 2;
  if (has_obytes64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->obytes64(), output);
  }

  // optional uint64 rbytes64 = 3;
  if (has_rbytes64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rbytes64(), output);
  }

  // optional uint64 opackets = 4;
  if (has_opackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opackets(), output);
  }

  // optional uint64 ipackets = 5;
  if (has_ipackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ipackets(), output);
  }

  // optional uint32 oerrors = 6;
  if (has_oerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oerrors(), output);
  }

  // optional uint32 ierrors = 7;
  if (has_ierrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ierrors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Net::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance(), target);
  }

  // optional uint64 obytes64 = 2;
  if (has_obytes64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->obytes64(), target);
  }

  // optional uint64 rbytes64 = 3;
  if (has_rbytes64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rbytes64(), target);
  }

  // optional uint64 opackets = 4;
  if (has_opackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->opackets(), target);
  }

  // optional uint64 ipackets = 5;
  if (has_ipackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ipackets(), target);
  }

  // optional uint32 oerrors = 6;
  if (has_oerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oerrors(), target);
  }

  // optional uint32 ierrors = 7;
  if (has_ierrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ierrors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Net::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance());
    }

    // optional uint64 obytes64 = 2;
    if (has_obytes64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obytes64());
    }

    // optional uint64 rbytes64 = 3;
    if (has_rbytes64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rbytes64());
    }

    // optional uint64 opackets = 4;
    if (has_opackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opackets());
    }

    // optional uint64 ipackets = 5;
    if (has_ipackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipackets());
    }

    // optional uint32 oerrors = 6;
    if (has_oerrors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oerrors());
    }

    // optional uint32 ierrors = 7;
    if (has_ierrors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ierrors());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Net::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Net* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Net*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Net::MergeFrom(const Packet_Net& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_obytes64()) {
      set_obytes64(from.obytes64());
    }
    if (from.has_rbytes64()) {
      set_rbytes64(from.rbytes64());
    }
    if (from.has_opackets()) {
      set_opackets(from.opackets());
    }
    if (from.has_ipackets()) {
      set_ipackets(from.ipackets());
    }
    if (from.has_oerrors()) {
      set_oerrors(from.oerrors());
    }
    if (from.has_ierrors()) {
      set_ierrors(from.ierrors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Net::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Net::CopyFrom(const Packet_Net& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Net::IsInitialized() const {

  return true;
}

void Packet_Net::Swap(Packet_Net* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    std::swap(obytes64_, other->obytes64_);
    std::swap(rbytes64_, other->rbytes64_);
    std::swap(opackets_, other->opackets_);
    std::swap(ipackets_, other->ipackets_);
    std::swap(oerrors_, other->oerrors_);
    std::swap(ierrors_, other->ierrors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Net::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Net_descriptor_;
  metadata.reflection = Packet_Net_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Disk::kInstanceFieldNumber;
const int Packet_Disk::kNreadFieldNumber;
const int Packet_Disk::kNwrittenFieldNumber;
const int Packet_Disk::kReadsFieldNumber;
const int Packet_Disk::kWritesFieldNumber;
const int Packet_Disk::kRtimeFieldNumber;
const int Packet_Disk::kWtimeFieldNumber;
const int Packet_Disk::kRlentimeFieldNumber;
const int Packet_Disk::kWlentimeFieldNumber;
const int Packet_Disk::kHarderrorFieldNumber;
const int Packet_Disk::kSofterrorFieldNumber;
const int Packet_Disk::kTranerrorFieldNumber;
#endif  // !_MSC_VER

Packet_Disk::Packet_Disk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Disk::InitAsDefaultInstance() {
}

Packet_Disk::Packet_Disk(const Packet_Disk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Disk::SharedCtor() {
  _cached_size_ = 0;
  instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nread_ = GOOGLE_ULONGLONG(0);
  nwritten_ = GOOGLE_ULONGLONG(0);
  reads_ = 0u;
  writes_ = 0u;
  rtime_ = GOOGLE_ULONGLONG(0);
  wtime_ = GOOGLE_ULONGLONG(0);
  rlentime_ = GOOGLE_ULONGLONG(0);
  wlentime_ = GOOGLE_ULONGLONG(0);
  harderror_ = 0u;
  softerror_ = 0u;
  tranerror_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Disk::~Packet_Disk() {
  SharedDtor();
}

void Packet_Disk::SharedDtor() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Disk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Disk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Disk_descriptor_;
}

const Packet_Disk& Packet_Disk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_Disk* Packet_Disk::default_instance_ = NULL;

Packet_Disk* Packet_Disk::New() const {
  return new Packet_Disk;
}

void Packet_Disk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance()) {
      if (instance_ != &::google::protobuf::internal::kEmptyString) {
        instance_->clear();
      }
    }
    nread_ = GOOGLE_ULONGLONG(0);
    nwritten_ = GOOGLE_ULONGLONG(0);
    reads_ = 0u;
    writes_ = 0u;
    rtime_ = GOOGLE_ULONGLONG(0);
    wtime_ = GOOGLE_ULONGLONG(0);
    rlentime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wlentime_ = GOOGLE_ULONGLONG(0);
    harderror_ = 0u;
    softerror_ = 0u;
    tranerror_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Disk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string instance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nread;
        break;
      }

      // optional uint64 nread = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nread_)));
          set_has_nread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nwritten;
        break;
      }

      // optional uint64 nwritten = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nwritten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nwritten_)));
          set_has_nwritten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reads;
        break;
      }

      // optional uint32 reads = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reads_)));
          set_has_reads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writes;
        break;
      }

      // optional uint32 writes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writes_)));
          set_has_writes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rtime;
        break;
      }

      // optional uint64 rtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_wtime;
        break;
      }

      // optional uint64 wtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wtime_)));
          set_has_wtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rlentime;
        break;
      }

      // optional uint64 rlentime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rlentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlentime_)));
          set_has_rlentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wlentime;
        break;
      }

      // optional uint64 wlentime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wlentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wlentime_)));
          set_has_wlentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_harderror;
        break;
      }

      // optional uint32 harderror = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harderror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harderror_)));
          set_has_harderror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_softerror;
        break;
      }

      // optional uint32 softerror = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_softerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &softerror_)));
          set_has_softerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tranerror;
        break;
      }

      // optional uint32 tranerror = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tranerror_)));
          set_has_tranerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Disk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instance(), output);
  }

  // optional uint64 nread = 2;
  if (has_nread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nread(), output);
  }

  // optional uint64 nwritten = 3;
  if (has_nwritten()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nwritten(), output);
  }

  // optional uint32 reads = 4;
  if (has_reads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reads(), output);
  }

  // optional uint32 writes = 5;
  if (has_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->writes(), output);
  }

  // optional uint64 rtime = 6;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rtime(), output);
  }

  // optional uint64 wtime = 7;
  if (has_wtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->wtime(), output);
  }

  // optional uint64 rlentime = 8;
  if (has_rlentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->rlentime(), output);
  }

  // optional uint64 wlentime = 9;
  if (has_wlentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->wlentime(), output);
  }

  // optional uint32 harderror = 10;
  if (has_harderror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->harderror(), output);
  }

  // optional uint32 softerror = 11;
  if (has_softerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->softerror(), output);
  }

  // optional uint32 tranerror = 12;
  if (has_tranerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tranerror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Disk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance(), target);
  }

  // optional uint64 nread = 2;
  if (has_nread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nread(), target);
  }

  // optional uint64 nwritten = 3;
  if (has_nwritten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nwritten(), target);
  }

  // optional uint32 reads = 4;
  if (has_reads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reads(), target);
  }

  // optional uint32 writes = 5;
  if (has_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->writes(), target);
  }

  // optional uint64 rtime = 6;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rtime(), target);
  }

  // optional uint64 wtime = 7;
  if (has_wtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->wtime(), target);
  }

  // optional uint64 rlentime = 8;
  if (has_rlentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->rlentime(), target);
  }

  // optional uint64 wlentime = 9;
  if (has_wlentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->wlentime(), target);
  }

  // optional uint32 harderror = 10;
  if (has_harderror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->harderror(), target);
  }

  // optional uint32 softerror = 11;
  if (has_softerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->softerror(), target);
  }

  // optional uint32 tranerror = 12;
  if (has_tranerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tranerror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Disk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance());
    }

    // optional uint64 nread = 2;
    if (has_nread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nread());
    }

    // optional uint64 nwritten = 3;
    if (has_nwritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nwritten());
    }

    // optional uint32 reads = 4;
    if (has_reads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reads());
    }

    // optional uint32 writes = 5;
    if (has_writes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writes());
    }

    // optional uint64 rtime = 6;
    if (has_rtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtime());
    }

    // optional uint64 wtime = 7;
    if (has_wtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wtime());
    }

    // optional uint64 rlentime = 8;
    if (has_rlentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlentime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 wlentime = 9;
    if (has_wlentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wlentime());
    }

    // optional uint32 harderror = 10;
    if (has_harderror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harderror());
    }

    // optional uint32 softerror = 11;
    if (has_softerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->softerror());
    }

    // optional uint32 tranerror = 12;
    if (has_tranerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tranerror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Disk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Disk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Disk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Disk::MergeFrom(const Packet_Disk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_nread()) {
      set_nread(from.nread());
    }
    if (from.has_nwritten()) {
      set_nwritten(from.nwritten());
    }
    if (from.has_reads()) {
      set_reads(from.reads());
    }
    if (from.has_writes()) {
      set_writes(from.writes());
    }
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
    if (from.has_wtime()) {
      set_wtime(from.wtime());
    }
    if (from.has_rlentime()) {
      set_rlentime(from.rlentime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wlentime()) {
      set_wlentime(from.wlentime());
    }
    if (from.has_harderror()) {
      set_harderror(from.harderror());
    }
    if (from.has_softerror()) {
      set_softerror(from.softerror());
    }
    if (from.has_tranerror()) {
      set_tranerror(from.tranerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Disk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Disk::CopyFrom(const Packet_Disk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Disk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Disk::Swap(Packet_Disk* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    std::swap(nread_, other->nread_);
    std::swap(nwritten_, other->nwritten_);
    std::swap(reads_, other->reads_);
    std::swap(writes_, other->writes_);
    std::swap(rtime_, other->rtime_);
    std::swap(wtime_, other->wtime_);
    std::swap(rlentime_, other->rlentime_);
    std::swap(wlentime_, other->wlentime_);
    std::swap(harderror_, other->harderror_);
    std::swap(softerror_, other->softerror_);
    std::swap(tranerror_, other->tranerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Disk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Disk_descriptor_;
  metadata.reflection = Packet_Disk_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Process::kPidFieldNumber;
const int Packet_Process::kExecnameFieldNumber;
const int Packet_Process::kUsageFieldNumber;
const int Packet_Process::kCpuFieldNumber;
#endif  // !_MSC_VER

Packet_Process::Packet_Process()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Process::InitAsDefaultInstance() {
}

Packet_Process::Packet_Process(const Packet_Process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Process::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  execname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usage_ = 0u;
  cpu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Process::~Packet_Process() {
  SharedDtor();
}

void Packet_Process::SharedDtor() {
  if (execname_ != &::google::protobuf::internal::kEmptyString) {
    delete execname_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Process_descriptor_;
}

const Packet_Process& Packet_Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_Process* Packet_Process::default_instance_ = NULL;

Packet_Process* Packet_Process::New() const {
  return new Packet_Process;
}

void Packet_Process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0u;
    if (has_execname()) {
      if (execname_ != &::google::protobuf::internal::kEmptyString) {
        execname_->clear();
      }
    }
    usage_ = 0u;
    cpu_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_execname;
        break;
      }

      // optional string execname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execname().data(), this->execname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage;
        break;
      }

      // optional uint32 usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
          set_has_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cpu;
        break;
      }

      // optional uint32 cpu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional string execname = 2;
  if (has_execname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execname().data(), this->execname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->execname(), output);
  }

  // optional uint32 usage = 3;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usage(), output);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // optional string execname = 2;
  if (has_execname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execname().data(), this->execname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->execname(), target);
  }

  // optional uint32 usage = 3;
  if (has_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usage(), target);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Process::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional string execname = 2;
    if (has_execname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execname());
    }

    // optional uint32 usage = 3;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }

    // optional uint32 cpu = 4;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Process::MergeFrom(const Packet_Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_execname()) {
      set_execname(from.execname());
    }
    if (from.has_usage()) {
      set_usage(from.usage());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Process::CopyFrom(const Packet_Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Process::IsInitialized() const {

  return true;
}

void Packet_Process::Swap(Packet_Process* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(execname_, other->execname_);
    std::swap(usage_, other->usage_);
    std::swap(cpu_, other->cpu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Process_descriptor_;
  metadata.reflection = Packet_Process_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_CallFreq::kNameFieldNumber;
const int Packet_CallFreq::kTimeFieldNumber;
const int Packet_CallFreq::kValueFieldNumber;
#endif  // !_MSC_VER

Packet_CallFreq::Packet_CallFreq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_CallFreq::InitAsDefaultInstance() {
}

Packet_CallFreq::Packet_CallFreq(const Packet_CallFreq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_CallFreq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_CallFreq::~Packet_CallFreq() {
  SharedDtor();
}

void Packet_CallFreq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Packet_CallFreq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_CallFreq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_CallFreq_descriptor_;
}

const Packet_CallFreq& Packet_CallFreq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet_CallFreq* Packet_CallFreq::default_instance_ = NULL;

Packet_CallFreq* Packet_CallFreq::New() const {
  return new Packet_CallFreq;
}

void Packet_CallFreq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_CallFreq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_CallFreq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_CallFreq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_CallFreq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_CallFreq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_CallFreq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_CallFreq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_CallFreq::MergeFrom(const Packet_CallFreq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_CallFreq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_CallFreq::CopyFrom(const Packet_CallFreq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_CallFreq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_CallFreq::Swap(Packet_CallFreq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_CallFreq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_CallFreq_descriptor_;
  metadata.reflection = Packet_CallFreq_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet::kNameFieldNumber;
const int Packet::kTimeFieldNumber;
const int Packet::kTicksFieldNumber;
const int Packet::kThreadsFieldNumber;
const int Packet::kProcessesFieldNumber;
const int Packet::kCpuFieldNumber;
const int Packet::kMemFieldNumber;
const int Packet::kNetFieldNumber;
const int Packet::kDiskFieldNumber;
const int Packet::kProcessFieldNumber;
const int Packet::kCallfreqFieldNumber;
const int Packet::kZonenameFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet::InitAsDefaultInstance() {
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ticks_ = 0u;
  threads_ = 0u;
  processes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  SharedDtor();
}

void Packet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pckt_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    ticks_ = 0u;
    threads_ = 0u;
    processes_ = 0u;
  }
  cpu_.Clear();
  mem_.Clear();
  net_.Clear();
  disk_.Clear();
  process_.Clear();
  callfreq_.Clear();
  zonename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ticks;
        break;
      }

      // optional uint32 ticks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticks_)));
          set_has_ticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_threads;
        break;
      }

      // optional uint32 threads = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
          set_has_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_processes;
        break;
      }

      // optional uint32 processes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processes_)));
          set_has_processes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cpu;
        break;
      }

      // repeated .PBMSG.Packet.Cpu cpu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cpu;
        if (input->ExpectTag(58)) goto parse_mem;
        break;
      }

      // repeated .PBMSG.Packet.Mem mem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mem;
        if (input->ExpectTag(66)) goto parse_net;
        break;
      }

      // repeated .PBMSG.Packet.Net net = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_net;
        if (input->ExpectTag(74)) goto parse_disk;
        break;
      }

      // repeated .PBMSG.Packet.Disk disk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_disk;
        if (input->ExpectTag(82)) goto parse_process;
        break;
      }

      // repeated .PBMSG.Packet.Process process = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_process;
        if (input->ExpectTag(90)) goto parse_callfreq;
        break;
      }

      // repeated .PBMSG.Packet.CallFreq callfreq = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callfreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_callfreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_callfreq;
        if (input->ExpectTag(98)) goto parse_zonename;
        break;
      }

      // repeated string zonename = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_zonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zonename(this->zonename_size() - 1).data(),
            this->zonename(this->zonename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_zonename;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint32 ticks = 3;
  if (has_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ticks(), output);
  }

  // optional uint32 threads = 4;
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->threads(), output);
  }

  // optional uint32 processes = 5;
  if (has_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->processes(), output);
  }

  // repeated .PBMSG.Packet.Cpu cpu = 6;
  for (int i = 0; i < this->cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cpu(i), output);
  }

  // repeated .PBMSG.Packet.Mem mem = 7;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mem(i), output);
  }

  // repeated .PBMSG.Packet.Net net = 8;
  for (int i = 0; i < this->net_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->net(i), output);
  }

  // repeated .PBMSG.Packet.Disk disk = 9;
  for (int i = 0; i < this->disk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->disk(i), output);
  }

  // repeated .PBMSG.Packet.Process process = 10;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->process(i), output);
  }

  // repeated .PBMSG.Packet.CallFreq callfreq = 11;
  for (int i = 0; i < this->callfreq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->callfreq(i), output);
  }

  // repeated string zonename = 12;
  for (int i = 0; i < this->zonename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->zonename(i).data(), this->zonename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->zonename(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint32 ticks = 3;
  if (has_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ticks(), target);
  }

  // optional uint32 threads = 4;
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->threads(), target);
  }

  // optional uint32 processes = 5;
  if (has_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->processes(), target);
  }

  // repeated .PBMSG.Packet.Cpu cpu = 6;
  for (int i = 0; i < this->cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cpu(i), target);
  }

  // repeated .PBMSG.Packet.Mem mem = 7;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mem(i), target);
  }

  // repeated .PBMSG.Packet.Net net = 8;
  for (int i = 0; i < this->net_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->net(i), target);
  }

  // repeated .PBMSG.Packet.Disk disk = 9;
  for (int i = 0; i < this->disk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->disk(i), target);
  }

  // repeated .PBMSG.Packet.Process process = 10;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->process(i), target);
  }

  // repeated .PBMSG.Packet.CallFreq callfreq = 11;
  for (int i = 0; i < this->callfreq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->callfreq(i), target);
  }

  // repeated string zonename = 12;
  for (int i = 0; i < this->zonename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zonename(i).data(), this->zonename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->zonename(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 ticks = 3;
    if (has_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticks());
    }

    // optional uint32 threads = 4;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads());
    }

    // optional uint32 processes = 5;
    if (has_processes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processes());
    }

  }
  // repeated .PBMSG.Packet.Cpu cpu = 6;
  total_size += 1 * this->cpu_size();
  for (int i = 0; i < this->cpu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpu(i));
  }

  // repeated .PBMSG.Packet.Mem mem = 7;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }

  // repeated .PBMSG.Packet.Net net = 8;
  total_size += 1 * this->net_size();
  for (int i = 0; i < this->net_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->net(i));
  }

  // repeated .PBMSG.Packet.Disk disk = 9;
  total_size += 1 * this->disk_size();
  for (int i = 0; i < this->disk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk(i));
  }

  // repeated .PBMSG.Packet.Process process = 10;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }

  // repeated .PBMSG.Packet.CallFreq callfreq = 11;
  total_size += 1 * this->callfreq_size();
  for (int i = 0; i < this->callfreq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->callfreq(i));
  }

  // repeated string zonename = 12;
  total_size += 1 * this->zonename_size();
  for (int i = 0; i < this->zonename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->zonename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpu_.MergeFrom(from.cpu_);
  mem_.MergeFrom(from.mem_);
  net_.MergeFrom(from.net_);
  disk_.MergeFrom(from.disk_);
  process_.MergeFrom(from.process_);
  callfreq_.MergeFrom(from.callfreq_);
  zonename_.MergeFrom(from.zonename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ticks()) {
      set_ticks(from.ticks());
    }
    if (from.has_threads()) {
      set_threads(from.threads());
    }
    if (from.has_processes()) {
      set_processes(from.processes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < disk_size(); i++) {
    if (!this->disk(i).IsInitialized()) return false;
  }
  for (int i = 0; i < callfreq_size(); i++) {
    if (!this->callfreq(i).IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(ticks_, other->ticks_);
    std::swap(threads_, other->threads_);
    std::swap(processes_, other->processes_);
    cpu_.Swap(&other->cpu_);
    mem_.Swap(&other->mem_);
    net_.Swap(&other->net_);
    disk_.Swap(&other->disk_);
    process_.Swap(&other->process_);
    callfreq_.Swap(&other->callfreq_);
    zonename_.Swap(&other->zonename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMSG

// @@protoc_insertion_point(global_scope)
