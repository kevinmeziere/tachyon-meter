// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pckt.proto

#ifndef PROTOBUF_pckt_2eproto__INCLUDED
#define PROTOBUF_pckt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PBMSG {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pckt_2eproto();
void protobuf_AssignDesc_pckt_2eproto();
void protobuf_ShutdownFile_pckt_2eproto();

class Packet;
class Packet_Cpu;
class Packet_Mem;
class Packet_Net;
class Packet_Disk;
class Packet_Process;
class Packet_CallFreq;

// ===================================================================

class Packet_Cpu : public ::google::protobuf::Message {
 public:
  Packet_Cpu();
  virtual ~Packet_Cpu();

  Packet_Cpu(const Packet_Cpu& from);

  inline Packet_Cpu& operator=(const Packet_Cpu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_Cpu& default_instance();

  void Swap(Packet_Cpu* other);

  // implements Message ----------------------------------------------

  Packet_Cpu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_Cpu& from);
  void MergeFrom(const Packet_Cpu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 core = 1;
  inline bool has_core() const;
  inline void clear_core();
  static const int kCoreFieldNumber = 1;
  inline ::google::protobuf::uint32 core() const;
  inline void set_core(::google::protobuf::uint32 value);

  // optional uint32 usage = 2;
  inline bool has_usage() const;
  inline void clear_usage();
  static const int kUsageFieldNumber = 2;
  inline ::google::protobuf::uint32 usage() const;
  inline void set_usage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.Cpu)
 private:
  inline void set_has_core();
  inline void clear_has_core();
  inline void set_has_usage();
  inline void clear_has_usage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 core_;
  ::google::protobuf::uint32 usage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_Cpu* default_instance_;
};
// -------------------------------------------------------------------

class Packet_Mem : public ::google::protobuf::Message {
 public:
  Packet_Mem();
  virtual ~Packet_Mem();

  Packet_Mem(const Packet_Mem& from);

  inline Packet_Mem& operator=(const Packet_Mem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_Mem& default_instance();

  void Swap(Packet_Mem* other);

  // implements Message ----------------------------------------------

  Packet_Mem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_Mem& from);
  void MergeFrom(const Packet_Mem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rss = 1;
  inline bool has_rss() const;
  inline void clear_rss();
  static const int kRssFieldNumber = 1;
  inline ::google::protobuf::uint64 rss() const;
  inline void set_rss(::google::protobuf::uint64 value);

  // optional uint64 physcap = 2;
  inline bool has_physcap() const;
  inline void clear_physcap();
  static const int kPhyscapFieldNumber = 2;
  inline ::google::protobuf::uint64 physcap() const;
  inline void set_physcap(::google::protobuf::uint64 value);

  // optional uint64 swap = 3;
  inline bool has_swap() const;
  inline void clear_swap();
  static const int kSwapFieldNumber = 3;
  inline ::google::protobuf::uint64 swap() const;
  inline void set_swap(::google::protobuf::uint64 value);

  // optional uint64 swapcap = 4;
  inline bool has_swapcap() const;
  inline void clear_swapcap();
  static const int kSwapcapFieldNumber = 4;
  inline ::google::protobuf::uint64 swapcap() const;
  inline void set_swapcap(::google::protobuf::uint64 value);

  // optional uint64 physmem = 5;
  inline bool has_physmem() const;
  inline void clear_physmem();
  static const int kPhysmemFieldNumber = 5;
  inline ::google::protobuf::uint64 physmem() const;
  inline void set_physmem(::google::protobuf::uint64 value);

  // optional uint64 pp_kernel = 6;
  inline bool has_pp_kernel() const;
  inline void clear_pp_kernel();
  static const int kPpKernelFieldNumber = 6;
  inline ::google::protobuf::uint64 pp_kernel() const;
  inline void set_pp_kernel(::google::protobuf::uint64 value);

  // optional uint64 freemem = 7;
  inline bool has_freemem() const;
  inline void clear_freemem();
  static const int kFreememFieldNumber = 7;
  inline ::google::protobuf::uint64 freemem() const;
  inline void set_freemem(::google::protobuf::uint64 value);

  // optional uint64 nalloc_calls = 8;
  inline bool has_nalloc_calls() const;
  inline void clear_nalloc_calls();
  static const int kNallocCallsFieldNumber = 8;
  inline ::google::protobuf::uint64 nalloc_calls() const;
  inline void set_nalloc_calls(::google::protobuf::uint64 value);

  // optional uint64 nfree_calls = 9;
  inline bool has_nfree_calls() const;
  inline void clear_nfree_calls();
  static const int kNfreeCallsFieldNumber = 9;
  inline ::google::protobuf::uint64 nfree_calls() const;
  inline void set_nfree_calls(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.Mem)
 private:
  inline void set_has_rss();
  inline void clear_has_rss();
  inline void set_has_physcap();
  inline void clear_has_physcap();
  inline void set_has_swap();
  inline void clear_has_swap();
  inline void set_has_swapcap();
  inline void clear_has_swapcap();
  inline void set_has_physmem();
  inline void clear_has_physmem();
  inline void set_has_pp_kernel();
  inline void clear_has_pp_kernel();
  inline void set_has_freemem();
  inline void clear_has_freemem();
  inline void set_has_nalloc_calls();
  inline void clear_has_nalloc_calls();
  inline void set_has_nfree_calls();
  inline void clear_has_nfree_calls();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 rss_;
  ::google::protobuf::uint64 physcap_;
  ::google::protobuf::uint64 swap_;
  ::google::protobuf::uint64 swapcap_;
  ::google::protobuf::uint64 physmem_;
  ::google::protobuf::uint64 pp_kernel_;
  ::google::protobuf::uint64 freemem_;
  ::google::protobuf::uint64 nalloc_calls_;
  ::google::protobuf::uint64 nfree_calls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_Mem* default_instance_;
};
// -------------------------------------------------------------------

class Packet_Net : public ::google::protobuf::Message {
 public:
  Packet_Net();
  virtual ~Packet_Net();

  Packet_Net(const Packet_Net& from);

  inline Packet_Net& operator=(const Packet_Net& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_Net& default_instance();

  void Swap(Packet_Net* other);

  // implements Message ----------------------------------------------

  Packet_Net* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_Net& from);
  void MergeFrom(const Packet_Net& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string instance = 1;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 1;
  inline const ::std::string& instance() const;
  inline void set_instance(const ::std::string& value);
  inline void set_instance(const char* value);
  inline void set_instance(const char* value, size_t size);
  inline ::std::string* mutable_instance();
  inline ::std::string* release_instance();
  inline void set_allocated_instance(::std::string* instance);

  // optional uint64 obytes64 = 2;
  inline bool has_obytes64() const;
  inline void clear_obytes64();
  static const int kObytes64FieldNumber = 2;
  inline ::google::protobuf::uint64 obytes64() const;
  inline void set_obytes64(::google::protobuf::uint64 value);

  // optional uint64 rbytes64 = 3;
  inline bool has_rbytes64() const;
  inline void clear_rbytes64();
  static const int kRbytes64FieldNumber = 3;
  inline ::google::protobuf::uint64 rbytes64() const;
  inline void set_rbytes64(::google::protobuf::uint64 value);

  // optional uint64 opackets = 4;
  inline bool has_opackets() const;
  inline void clear_opackets();
  static const int kOpacketsFieldNumber = 4;
  inline ::google::protobuf::uint64 opackets() const;
  inline void set_opackets(::google::protobuf::uint64 value);

  // optional uint64 ipackets = 5;
  inline bool has_ipackets() const;
  inline void clear_ipackets();
  static const int kIpacketsFieldNumber = 5;
  inline ::google::protobuf::uint64 ipackets() const;
  inline void set_ipackets(::google::protobuf::uint64 value);

  // optional uint32 oerrors = 6;
  inline bool has_oerrors() const;
  inline void clear_oerrors();
  static const int kOerrorsFieldNumber = 6;
  inline ::google::protobuf::uint32 oerrors() const;
  inline void set_oerrors(::google::protobuf::uint32 value);

  // optional uint32 ierrors = 7;
  inline bool has_ierrors() const;
  inline void clear_ierrors();
  static const int kIerrorsFieldNumber = 7;
  inline ::google::protobuf::uint32 ierrors() const;
  inline void set_ierrors(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.Net)
 private:
  inline void set_has_instance();
  inline void clear_has_instance();
  inline void set_has_obytes64();
  inline void clear_has_obytes64();
  inline void set_has_rbytes64();
  inline void clear_has_rbytes64();
  inline void set_has_opackets();
  inline void clear_has_opackets();
  inline void set_has_ipackets();
  inline void clear_has_ipackets();
  inline void set_has_oerrors();
  inline void clear_has_oerrors();
  inline void set_has_ierrors();
  inline void clear_has_ierrors();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* instance_;
  ::google::protobuf::uint64 obytes64_;
  ::google::protobuf::uint64 rbytes64_;
  ::google::protobuf::uint64 opackets_;
  ::google::protobuf::uint64 ipackets_;
  ::google::protobuf::uint32 oerrors_;
  ::google::protobuf::uint32 ierrors_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_Net* default_instance_;
};
// -------------------------------------------------------------------

class Packet_Disk : public ::google::protobuf::Message {
 public:
  Packet_Disk();
  virtual ~Packet_Disk();

  Packet_Disk(const Packet_Disk& from);

  inline Packet_Disk& operator=(const Packet_Disk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_Disk& default_instance();

  void Swap(Packet_Disk* other);

  // implements Message ----------------------------------------------

  Packet_Disk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_Disk& from);
  void MergeFrom(const Packet_Disk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string instance = 1;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 1;
  inline const ::std::string& instance() const;
  inline void set_instance(const ::std::string& value);
  inline void set_instance(const char* value);
  inline void set_instance(const char* value, size_t size);
  inline ::std::string* mutable_instance();
  inline ::std::string* release_instance();
  inline void set_allocated_instance(::std::string* instance);

  // optional uint64 nread = 2;
  inline bool has_nread() const;
  inline void clear_nread();
  static const int kNreadFieldNumber = 2;
  inline ::google::protobuf::uint64 nread() const;
  inline void set_nread(::google::protobuf::uint64 value);

  // optional uint64 nwritten = 3;
  inline bool has_nwritten() const;
  inline void clear_nwritten();
  static const int kNwrittenFieldNumber = 3;
  inline ::google::protobuf::uint64 nwritten() const;
  inline void set_nwritten(::google::protobuf::uint64 value);

  // optional uint32 reads = 4;
  inline bool has_reads() const;
  inline void clear_reads();
  static const int kReadsFieldNumber = 4;
  inline ::google::protobuf::uint32 reads() const;
  inline void set_reads(::google::protobuf::uint32 value);

  // optional uint32 writes = 5;
  inline bool has_writes() const;
  inline void clear_writes();
  static const int kWritesFieldNumber = 5;
  inline ::google::protobuf::uint32 writes() const;
  inline void set_writes(::google::protobuf::uint32 value);

  // optional uint64 rtime = 6;
  inline bool has_rtime() const;
  inline void clear_rtime();
  static const int kRtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 rtime() const;
  inline void set_rtime(::google::protobuf::uint64 value);

  // optional uint64 wtime = 7;
  inline bool has_wtime() const;
  inline void clear_wtime();
  static const int kWtimeFieldNumber = 7;
  inline ::google::protobuf::uint64 wtime() const;
  inline void set_wtime(::google::protobuf::uint64 value);

  // optional uint64 rlentime = 8;
  inline bool has_rlentime() const;
  inline void clear_rlentime();
  static const int kRlentimeFieldNumber = 8;
  inline ::google::protobuf::uint64 rlentime() const;
  inline void set_rlentime(::google::protobuf::uint64 value);

  // optional uint64 wlentime = 9;
  inline bool has_wlentime() const;
  inline void clear_wlentime();
  static const int kWlentimeFieldNumber = 9;
  inline ::google::protobuf::uint64 wlentime() const;
  inline void set_wlentime(::google::protobuf::uint64 value);

  // optional uint32 harderror = 10;
  inline bool has_harderror() const;
  inline void clear_harderror();
  static const int kHarderrorFieldNumber = 10;
  inline ::google::protobuf::uint32 harderror() const;
  inline void set_harderror(::google::protobuf::uint32 value);

  // optional uint32 softerror = 11;
  inline bool has_softerror() const;
  inline void clear_softerror();
  static const int kSofterrorFieldNumber = 11;
  inline ::google::protobuf::uint32 softerror() const;
  inline void set_softerror(::google::protobuf::uint32 value);

  // optional uint32 tranerror = 12;
  inline bool has_tranerror() const;
  inline void clear_tranerror();
  static const int kTranerrorFieldNumber = 12;
  inline ::google::protobuf::uint32 tranerror() const;
  inline void set_tranerror(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.Disk)
 private:
  inline void set_has_instance();
  inline void clear_has_instance();
  inline void set_has_nread();
  inline void clear_has_nread();
  inline void set_has_nwritten();
  inline void clear_has_nwritten();
  inline void set_has_reads();
  inline void clear_has_reads();
  inline void set_has_writes();
  inline void clear_has_writes();
  inline void set_has_rtime();
  inline void clear_has_rtime();
  inline void set_has_wtime();
  inline void clear_has_wtime();
  inline void set_has_rlentime();
  inline void clear_has_rlentime();
  inline void set_has_wlentime();
  inline void clear_has_wlentime();
  inline void set_has_harderror();
  inline void clear_has_harderror();
  inline void set_has_softerror();
  inline void clear_has_softerror();
  inline void set_has_tranerror();
  inline void clear_has_tranerror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* instance_;
  ::google::protobuf::uint64 nread_;
  ::google::protobuf::uint64 nwritten_;
  ::google::protobuf::uint32 reads_;
  ::google::protobuf::uint32 writes_;
  ::google::protobuf::uint64 rtime_;
  ::google::protobuf::uint64 wtime_;
  ::google::protobuf::uint64 rlentime_;
  ::google::protobuf::uint64 wlentime_;
  ::google::protobuf::uint32 harderror_;
  ::google::protobuf::uint32 softerror_;
  ::google::protobuf::uint32 tranerror_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_Disk* default_instance_;
};
// -------------------------------------------------------------------

class Packet_Process : public ::google::protobuf::Message {
 public:
  Packet_Process();
  virtual ~Packet_Process();

  Packet_Process(const Packet_Process& from);

  inline Packet_Process& operator=(const Packet_Process& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_Process& default_instance();

  void Swap(Packet_Process* other);

  // implements Message ----------------------------------------------

  Packet_Process* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_Process& from);
  void MergeFrom(const Packet_Process& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // optional string execname = 2;
  inline bool has_execname() const;
  inline void clear_execname();
  static const int kExecnameFieldNumber = 2;
  inline const ::std::string& execname() const;
  inline void set_execname(const ::std::string& value);
  inline void set_execname(const char* value);
  inline void set_execname(const char* value, size_t size);
  inline ::std::string* mutable_execname();
  inline ::std::string* release_execname();
  inline void set_allocated_execname(::std::string* execname);

  // optional uint32 usage = 3;
  inline bool has_usage() const;
  inline void clear_usage();
  static const int kUsageFieldNumber = 3;
  inline ::google::protobuf::uint32 usage() const;
  inline void set_usage(::google::protobuf::uint32 value);

  // optional uint32 cpu = 4;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 4;
  inline ::google::protobuf::uint32 cpu() const;
  inline void set_cpu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.Process)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_execname();
  inline void clear_has_execname();
  inline void set_has_usage();
  inline void clear_has_usage();
  inline void set_has_cpu();
  inline void clear_has_cpu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* execname_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 usage_;
  ::google::protobuf::uint32 cpu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_Process* default_instance_;
};
// -------------------------------------------------------------------

class Packet_CallFreq : public ::google::protobuf::Message {
 public:
  Packet_CallFreq();
  virtual ~Packet_CallFreq();

  Packet_CallFreq(const Packet_CallFreq& from);

  inline Packet_CallFreq& operator=(const Packet_CallFreq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet_CallFreq& default_instance();

  void Swap(Packet_CallFreq* other);

  // implements Message ----------------------------------------------

  Packet_CallFreq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet_CallFreq& from);
  void MergeFrom(const Packet_CallFreq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBMSG.Packet.CallFreq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet_CallFreq* default_instance_;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_Cpu Cpu;
  typedef Packet_Mem Mem;
  typedef Packet_Net Net;
  typedef Packet_Disk Disk;
  typedef Packet_Process Process;
  typedef Packet_CallFreq CallFreq;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 ticks = 3;
  inline bool has_ticks() const;
  inline void clear_ticks();
  static const int kTicksFieldNumber = 3;
  inline ::google::protobuf::uint32 ticks() const;
  inline void set_ticks(::google::protobuf::uint32 value);

  // optional uint32 threads = 4;
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 4;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // optional uint32 processes = 5;
  inline bool has_processes() const;
  inline void clear_processes();
  static const int kProcessesFieldNumber = 5;
  inline ::google::protobuf::uint32 processes() const;
  inline void set_processes(::google::protobuf::uint32 value);

  // repeated .PBMSG.Packet.Cpu cpu = 6;
  inline int cpu_size() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 6;
  inline const ::PBMSG::Packet_Cpu& cpu(int index) const;
  inline ::PBMSG::Packet_Cpu* mutable_cpu(int index);
  inline ::PBMSG::Packet_Cpu* add_cpu();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Cpu >&
      cpu() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Cpu >*
      mutable_cpu();

  // repeated .PBMSG.Packet.Mem mem = 7;
  inline int mem_size() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 7;
  inline const ::PBMSG::Packet_Mem& mem(int index) const;
  inline ::PBMSG::Packet_Mem* mutable_mem(int index);
  inline ::PBMSG::Packet_Mem* add_mem();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Mem >&
      mem() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Mem >*
      mutable_mem();

  // repeated .PBMSG.Packet.Net net = 8;
  inline int net_size() const;
  inline void clear_net();
  static const int kNetFieldNumber = 8;
  inline const ::PBMSG::Packet_Net& net(int index) const;
  inline ::PBMSG::Packet_Net* mutable_net(int index);
  inline ::PBMSG::Packet_Net* add_net();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Net >&
      net() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Net >*
      mutable_net();

  // repeated .PBMSG.Packet.Disk disk = 9;
  inline int disk_size() const;
  inline void clear_disk();
  static const int kDiskFieldNumber = 9;
  inline const ::PBMSG::Packet_Disk& disk(int index) const;
  inline ::PBMSG::Packet_Disk* mutable_disk(int index);
  inline ::PBMSG::Packet_Disk* add_disk();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Disk >&
      disk() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Disk >*
      mutable_disk();

  // repeated .PBMSG.Packet.Process process = 10;
  inline int process_size() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 10;
  inline const ::PBMSG::Packet_Process& process(int index) const;
  inline ::PBMSG::Packet_Process* mutable_process(int index);
  inline ::PBMSG::Packet_Process* add_process();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Process >&
      process() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Process >*
      mutable_process();

  // repeated .PBMSG.Packet.CallFreq callfreq = 11;
  inline int callfreq_size() const;
  inline void clear_callfreq();
  static const int kCallfreqFieldNumber = 11;
  inline const ::PBMSG::Packet_CallFreq& callfreq(int index) const;
  inline ::PBMSG::Packet_CallFreq* mutable_callfreq(int index);
  inline ::PBMSG::Packet_CallFreq* add_callfreq();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_CallFreq >&
      callfreq() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_CallFreq >*
      mutable_callfreq();

  // repeated string zonename = 12;
  inline int zonename_size() const;
  inline void clear_zonename();
  static const int kZonenameFieldNumber = 12;
  inline const ::std::string& zonename(int index) const;
  inline ::std::string* mutable_zonename(int index);
  inline void set_zonename(int index, const ::std::string& value);
  inline void set_zonename(int index, const char* value);
  inline void set_zonename(int index, const char* value, size_t size);
  inline ::std::string* add_zonename();
  inline void add_zonename(const ::std::string& value);
  inline void add_zonename(const char* value);
  inline void add_zonename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& zonename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_zonename();

  // @@protoc_insertion_point(class_scope:PBMSG.Packet)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ticks();
  inline void clear_has_ticks();
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_processes();
  inline void clear_has_processes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 ticks_;
  ::google::protobuf::uint32 threads_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Cpu > cpu_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Mem > mem_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Net > net_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Disk > disk_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Process > process_;
  ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_CallFreq > callfreq_;
  ::google::protobuf::RepeatedPtrField< ::std::string> zonename_;
  ::google::protobuf::uint32 processes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_pckt_2eproto();
  friend void protobuf_AssignDesc_pckt_2eproto();
  friend void protobuf_ShutdownFile_pckt_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet_Cpu

// optional uint32 core = 1;
inline bool Packet_Cpu::has_core() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_Cpu::set_has_core() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_Cpu::clear_has_core() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_Cpu::clear_core() {
  core_ = 0u;
  clear_has_core();
}
inline ::google::protobuf::uint32 Packet_Cpu::core() const {
  return core_;
}
inline void Packet_Cpu::set_core(::google::protobuf::uint32 value) {
  set_has_core();
  core_ = value;
}

// optional uint32 usage = 2;
inline bool Packet_Cpu::has_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_Cpu::set_has_usage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_Cpu::clear_has_usage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_Cpu::clear_usage() {
  usage_ = 0u;
  clear_has_usage();
}
inline ::google::protobuf::uint32 Packet_Cpu::usage() const {
  return usage_;
}
inline void Packet_Cpu::set_usage(::google::protobuf::uint32 value) {
  set_has_usage();
  usage_ = value;
}

// -------------------------------------------------------------------

// Packet_Mem

// optional uint64 rss = 1;
inline bool Packet_Mem::has_rss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_Mem::set_has_rss() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_Mem::clear_has_rss() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_Mem::clear_rss() {
  rss_ = GOOGLE_ULONGLONG(0);
  clear_has_rss();
}
inline ::google::protobuf::uint64 Packet_Mem::rss() const {
  return rss_;
}
inline void Packet_Mem::set_rss(::google::protobuf::uint64 value) {
  set_has_rss();
  rss_ = value;
}

// optional uint64 physcap = 2;
inline bool Packet_Mem::has_physcap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_Mem::set_has_physcap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_Mem::clear_has_physcap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_Mem::clear_physcap() {
  physcap_ = GOOGLE_ULONGLONG(0);
  clear_has_physcap();
}
inline ::google::protobuf::uint64 Packet_Mem::physcap() const {
  return physcap_;
}
inline void Packet_Mem::set_physcap(::google::protobuf::uint64 value) {
  set_has_physcap();
  physcap_ = value;
}

// optional uint64 swap = 3;
inline bool Packet_Mem::has_swap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet_Mem::set_has_swap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet_Mem::clear_has_swap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet_Mem::clear_swap() {
  swap_ = GOOGLE_ULONGLONG(0);
  clear_has_swap();
}
inline ::google::protobuf::uint64 Packet_Mem::swap() const {
  return swap_;
}
inline void Packet_Mem::set_swap(::google::protobuf::uint64 value) {
  set_has_swap();
  swap_ = value;
}

// optional uint64 swapcap = 4;
inline bool Packet_Mem::has_swapcap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet_Mem::set_has_swapcap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet_Mem::clear_has_swapcap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet_Mem::clear_swapcap() {
  swapcap_ = GOOGLE_ULONGLONG(0);
  clear_has_swapcap();
}
inline ::google::protobuf::uint64 Packet_Mem::swapcap() const {
  return swapcap_;
}
inline void Packet_Mem::set_swapcap(::google::protobuf::uint64 value) {
  set_has_swapcap();
  swapcap_ = value;
}

// optional uint64 physmem = 5;
inline bool Packet_Mem::has_physmem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet_Mem::set_has_physmem() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet_Mem::clear_has_physmem() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet_Mem::clear_physmem() {
  physmem_ = GOOGLE_ULONGLONG(0);
  clear_has_physmem();
}
inline ::google::protobuf::uint64 Packet_Mem::physmem() const {
  return physmem_;
}
inline void Packet_Mem::set_physmem(::google::protobuf::uint64 value) {
  set_has_physmem();
  physmem_ = value;
}

// optional uint64 pp_kernel = 6;
inline bool Packet_Mem::has_pp_kernel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet_Mem::set_has_pp_kernel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet_Mem::clear_has_pp_kernel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet_Mem::clear_pp_kernel() {
  pp_kernel_ = GOOGLE_ULONGLONG(0);
  clear_has_pp_kernel();
}
inline ::google::protobuf::uint64 Packet_Mem::pp_kernel() const {
  return pp_kernel_;
}
inline void Packet_Mem::set_pp_kernel(::google::protobuf::uint64 value) {
  set_has_pp_kernel();
  pp_kernel_ = value;
}

// optional uint64 freemem = 7;
inline bool Packet_Mem::has_freemem() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Packet_Mem::set_has_freemem() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Packet_Mem::clear_has_freemem() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Packet_Mem::clear_freemem() {
  freemem_ = GOOGLE_ULONGLONG(0);
  clear_has_freemem();
}
inline ::google::protobuf::uint64 Packet_Mem::freemem() const {
  return freemem_;
}
inline void Packet_Mem::set_freemem(::google::protobuf::uint64 value) {
  set_has_freemem();
  freemem_ = value;
}

// optional uint64 nalloc_calls = 8;
inline bool Packet_Mem::has_nalloc_calls() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Packet_Mem::set_has_nalloc_calls() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Packet_Mem::clear_has_nalloc_calls() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Packet_Mem::clear_nalloc_calls() {
  nalloc_calls_ = GOOGLE_ULONGLONG(0);
  clear_has_nalloc_calls();
}
inline ::google::protobuf::uint64 Packet_Mem::nalloc_calls() const {
  return nalloc_calls_;
}
inline void Packet_Mem::set_nalloc_calls(::google::protobuf::uint64 value) {
  set_has_nalloc_calls();
  nalloc_calls_ = value;
}

// optional uint64 nfree_calls = 9;
inline bool Packet_Mem::has_nfree_calls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Packet_Mem::set_has_nfree_calls() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Packet_Mem::clear_has_nfree_calls() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Packet_Mem::clear_nfree_calls() {
  nfree_calls_ = GOOGLE_ULONGLONG(0);
  clear_has_nfree_calls();
}
inline ::google::protobuf::uint64 Packet_Mem::nfree_calls() const {
  return nfree_calls_;
}
inline void Packet_Mem::set_nfree_calls(::google::protobuf::uint64 value) {
  set_has_nfree_calls();
  nfree_calls_ = value;
}

// -------------------------------------------------------------------

// Packet_Net

// optional string instance = 1;
inline bool Packet_Net::has_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_Net::set_has_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_Net::clear_has_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_Net::clear_instance() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    instance_->clear();
  }
  clear_has_instance();
}
inline const ::std::string& Packet_Net::instance() const {
  return *instance_;
}
inline void Packet_Net::set_instance(const ::std::string& value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void Packet_Net::set_instance(const char* value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void Packet_Net::set_instance(const char* value, size_t size) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet_Net::mutable_instance() {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  return instance_;
}
inline ::std::string* Packet_Net::release_instance() {
  clear_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instance_;
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet_Net::set_allocated_instance(::std::string* instance) {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (instance) {
    set_has_instance();
    instance_ = instance;
  } else {
    clear_has_instance();
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 obytes64 = 2;
inline bool Packet_Net::has_obytes64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_Net::set_has_obytes64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_Net::clear_has_obytes64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_Net::clear_obytes64() {
  obytes64_ = GOOGLE_ULONGLONG(0);
  clear_has_obytes64();
}
inline ::google::protobuf::uint64 Packet_Net::obytes64() const {
  return obytes64_;
}
inline void Packet_Net::set_obytes64(::google::protobuf::uint64 value) {
  set_has_obytes64();
  obytes64_ = value;
}

// optional uint64 rbytes64 = 3;
inline bool Packet_Net::has_rbytes64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet_Net::set_has_rbytes64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet_Net::clear_has_rbytes64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet_Net::clear_rbytes64() {
  rbytes64_ = GOOGLE_ULONGLONG(0);
  clear_has_rbytes64();
}
inline ::google::protobuf::uint64 Packet_Net::rbytes64() const {
  return rbytes64_;
}
inline void Packet_Net::set_rbytes64(::google::protobuf::uint64 value) {
  set_has_rbytes64();
  rbytes64_ = value;
}

// optional uint64 opackets = 4;
inline bool Packet_Net::has_opackets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet_Net::set_has_opackets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet_Net::clear_has_opackets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet_Net::clear_opackets() {
  opackets_ = GOOGLE_ULONGLONG(0);
  clear_has_opackets();
}
inline ::google::protobuf::uint64 Packet_Net::opackets() const {
  return opackets_;
}
inline void Packet_Net::set_opackets(::google::protobuf::uint64 value) {
  set_has_opackets();
  opackets_ = value;
}

// optional uint64 ipackets = 5;
inline bool Packet_Net::has_ipackets() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet_Net::set_has_ipackets() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet_Net::clear_has_ipackets() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet_Net::clear_ipackets() {
  ipackets_ = GOOGLE_ULONGLONG(0);
  clear_has_ipackets();
}
inline ::google::protobuf::uint64 Packet_Net::ipackets() const {
  return ipackets_;
}
inline void Packet_Net::set_ipackets(::google::protobuf::uint64 value) {
  set_has_ipackets();
  ipackets_ = value;
}

// optional uint32 oerrors = 6;
inline bool Packet_Net::has_oerrors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet_Net::set_has_oerrors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet_Net::clear_has_oerrors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet_Net::clear_oerrors() {
  oerrors_ = 0u;
  clear_has_oerrors();
}
inline ::google::protobuf::uint32 Packet_Net::oerrors() const {
  return oerrors_;
}
inline void Packet_Net::set_oerrors(::google::protobuf::uint32 value) {
  set_has_oerrors();
  oerrors_ = value;
}

// optional uint32 ierrors = 7;
inline bool Packet_Net::has_ierrors() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Packet_Net::set_has_ierrors() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Packet_Net::clear_has_ierrors() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Packet_Net::clear_ierrors() {
  ierrors_ = 0u;
  clear_has_ierrors();
}
inline ::google::protobuf::uint32 Packet_Net::ierrors() const {
  return ierrors_;
}
inline void Packet_Net::set_ierrors(::google::protobuf::uint32 value) {
  set_has_ierrors();
  ierrors_ = value;
}

// -------------------------------------------------------------------

// Packet_Disk

// required string instance = 1;
inline bool Packet_Disk::has_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_Disk::set_has_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_Disk::clear_has_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_Disk::clear_instance() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    instance_->clear();
  }
  clear_has_instance();
}
inline const ::std::string& Packet_Disk::instance() const {
  return *instance_;
}
inline void Packet_Disk::set_instance(const ::std::string& value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void Packet_Disk::set_instance(const char* value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void Packet_Disk::set_instance(const char* value, size_t size) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet_Disk::mutable_instance() {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  return instance_;
}
inline ::std::string* Packet_Disk::release_instance() {
  clear_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instance_;
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet_Disk::set_allocated_instance(::std::string* instance) {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (instance) {
    set_has_instance();
    instance_ = instance;
  } else {
    clear_has_instance();
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 nread = 2;
inline bool Packet_Disk::has_nread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_Disk::set_has_nread() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_Disk::clear_has_nread() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_Disk::clear_nread() {
  nread_ = GOOGLE_ULONGLONG(0);
  clear_has_nread();
}
inline ::google::protobuf::uint64 Packet_Disk::nread() const {
  return nread_;
}
inline void Packet_Disk::set_nread(::google::protobuf::uint64 value) {
  set_has_nread();
  nread_ = value;
}

// optional uint64 nwritten = 3;
inline bool Packet_Disk::has_nwritten() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet_Disk::set_has_nwritten() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet_Disk::clear_has_nwritten() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet_Disk::clear_nwritten() {
  nwritten_ = GOOGLE_ULONGLONG(0);
  clear_has_nwritten();
}
inline ::google::protobuf::uint64 Packet_Disk::nwritten() const {
  return nwritten_;
}
inline void Packet_Disk::set_nwritten(::google::protobuf::uint64 value) {
  set_has_nwritten();
  nwritten_ = value;
}

// optional uint32 reads = 4;
inline bool Packet_Disk::has_reads() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet_Disk::set_has_reads() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet_Disk::clear_has_reads() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet_Disk::clear_reads() {
  reads_ = 0u;
  clear_has_reads();
}
inline ::google::protobuf::uint32 Packet_Disk::reads() const {
  return reads_;
}
inline void Packet_Disk::set_reads(::google::protobuf::uint32 value) {
  set_has_reads();
  reads_ = value;
}

// optional uint32 writes = 5;
inline bool Packet_Disk::has_writes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet_Disk::set_has_writes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet_Disk::clear_has_writes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet_Disk::clear_writes() {
  writes_ = 0u;
  clear_has_writes();
}
inline ::google::protobuf::uint32 Packet_Disk::writes() const {
  return writes_;
}
inline void Packet_Disk::set_writes(::google::protobuf::uint32 value) {
  set_has_writes();
  writes_ = value;
}

// optional uint64 rtime = 6;
inline bool Packet_Disk::has_rtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet_Disk::set_has_rtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet_Disk::clear_has_rtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet_Disk::clear_rtime() {
  rtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rtime();
}
inline ::google::protobuf::uint64 Packet_Disk::rtime() const {
  return rtime_;
}
inline void Packet_Disk::set_rtime(::google::protobuf::uint64 value) {
  set_has_rtime();
  rtime_ = value;
}

// optional uint64 wtime = 7;
inline bool Packet_Disk::has_wtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Packet_Disk::set_has_wtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Packet_Disk::clear_has_wtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Packet_Disk::clear_wtime() {
  wtime_ = GOOGLE_ULONGLONG(0);
  clear_has_wtime();
}
inline ::google::protobuf::uint64 Packet_Disk::wtime() const {
  return wtime_;
}
inline void Packet_Disk::set_wtime(::google::protobuf::uint64 value) {
  set_has_wtime();
  wtime_ = value;
}

// optional uint64 rlentime = 8;
inline bool Packet_Disk::has_rlentime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Packet_Disk::set_has_rlentime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Packet_Disk::clear_has_rlentime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Packet_Disk::clear_rlentime() {
  rlentime_ = GOOGLE_ULONGLONG(0);
  clear_has_rlentime();
}
inline ::google::protobuf::uint64 Packet_Disk::rlentime() const {
  return rlentime_;
}
inline void Packet_Disk::set_rlentime(::google::protobuf::uint64 value) {
  set_has_rlentime();
  rlentime_ = value;
}

// optional uint64 wlentime = 9;
inline bool Packet_Disk::has_wlentime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Packet_Disk::set_has_wlentime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Packet_Disk::clear_has_wlentime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Packet_Disk::clear_wlentime() {
  wlentime_ = GOOGLE_ULONGLONG(0);
  clear_has_wlentime();
}
inline ::google::protobuf::uint64 Packet_Disk::wlentime() const {
  return wlentime_;
}
inline void Packet_Disk::set_wlentime(::google::protobuf::uint64 value) {
  set_has_wlentime();
  wlentime_ = value;
}

// optional uint32 harderror = 10;
inline bool Packet_Disk::has_harderror() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Packet_Disk::set_has_harderror() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Packet_Disk::clear_has_harderror() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Packet_Disk::clear_harderror() {
  harderror_ = 0u;
  clear_has_harderror();
}
inline ::google::protobuf::uint32 Packet_Disk::harderror() const {
  return harderror_;
}
inline void Packet_Disk::set_harderror(::google::protobuf::uint32 value) {
  set_has_harderror();
  harderror_ = value;
}

// optional uint32 softerror = 11;
inline bool Packet_Disk::has_softerror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Packet_Disk::set_has_softerror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Packet_Disk::clear_has_softerror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Packet_Disk::clear_softerror() {
  softerror_ = 0u;
  clear_has_softerror();
}
inline ::google::protobuf::uint32 Packet_Disk::softerror() const {
  return softerror_;
}
inline void Packet_Disk::set_softerror(::google::protobuf::uint32 value) {
  set_has_softerror();
  softerror_ = value;
}

// optional uint32 tranerror = 12;
inline bool Packet_Disk::has_tranerror() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Packet_Disk::set_has_tranerror() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Packet_Disk::clear_has_tranerror() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Packet_Disk::clear_tranerror() {
  tranerror_ = 0u;
  clear_has_tranerror();
}
inline ::google::protobuf::uint32 Packet_Disk::tranerror() const {
  return tranerror_;
}
inline void Packet_Disk::set_tranerror(::google::protobuf::uint32 value) {
  set_has_tranerror();
  tranerror_ = value;
}

// -------------------------------------------------------------------

// Packet_Process

// optional uint32 pid = 1;
inline bool Packet_Process::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_Process::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_Process::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_Process::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 Packet_Process::pid() const {
  return pid_;
}
inline void Packet_Process::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string execname = 2;
inline bool Packet_Process::has_execname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_Process::set_has_execname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_Process::clear_has_execname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_Process::clear_execname() {
  if (execname_ != &::google::protobuf::internal::kEmptyString) {
    execname_->clear();
  }
  clear_has_execname();
}
inline const ::std::string& Packet_Process::execname() const {
  return *execname_;
}
inline void Packet_Process::set_execname(const ::std::string& value) {
  set_has_execname();
  if (execname_ == &::google::protobuf::internal::kEmptyString) {
    execname_ = new ::std::string;
  }
  execname_->assign(value);
}
inline void Packet_Process::set_execname(const char* value) {
  set_has_execname();
  if (execname_ == &::google::protobuf::internal::kEmptyString) {
    execname_ = new ::std::string;
  }
  execname_->assign(value);
}
inline void Packet_Process::set_execname(const char* value, size_t size) {
  set_has_execname();
  if (execname_ == &::google::protobuf::internal::kEmptyString) {
    execname_ = new ::std::string;
  }
  execname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet_Process::mutable_execname() {
  set_has_execname();
  if (execname_ == &::google::protobuf::internal::kEmptyString) {
    execname_ = new ::std::string;
  }
  return execname_;
}
inline ::std::string* Packet_Process::release_execname() {
  clear_has_execname();
  if (execname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = execname_;
    execname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet_Process::set_allocated_execname(::std::string* execname) {
  if (execname_ != &::google::protobuf::internal::kEmptyString) {
    delete execname_;
  }
  if (execname) {
    set_has_execname();
    execname_ = execname;
  } else {
    clear_has_execname();
    execname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 usage = 3;
inline bool Packet_Process::has_usage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet_Process::set_has_usage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet_Process::clear_has_usage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet_Process::clear_usage() {
  usage_ = 0u;
  clear_has_usage();
}
inline ::google::protobuf::uint32 Packet_Process::usage() const {
  return usage_;
}
inline void Packet_Process::set_usage(::google::protobuf::uint32 value) {
  set_has_usage();
  usage_ = value;
}

// optional uint32 cpu = 4;
inline bool Packet_Process::has_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet_Process::set_has_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet_Process::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet_Process::clear_cpu() {
  cpu_ = 0u;
  clear_has_cpu();
}
inline ::google::protobuf::uint32 Packet_Process::cpu() const {
  return cpu_;
}
inline void Packet_Process::set_cpu(::google::protobuf::uint32 value) {
  set_has_cpu();
  cpu_ = value;
}

// -------------------------------------------------------------------

// Packet_CallFreq

// required string name = 1;
inline bool Packet_CallFreq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet_CallFreq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet_CallFreq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet_CallFreq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Packet_CallFreq::name() const {
  return *name_;
}
inline void Packet_CallFreq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Packet_CallFreq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Packet_CallFreq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet_CallFreq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Packet_CallFreq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet_CallFreq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 time = 2;
inline bool Packet_CallFreq::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet_CallFreq::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet_CallFreq::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet_CallFreq::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Packet_CallFreq::time() const {
  return time_;
}
inline void Packet_CallFreq::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 value = 3;
inline bool Packet_CallFreq::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet_CallFreq::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet_CallFreq::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet_CallFreq::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Packet_CallFreq::value() const {
  return value_;
}
inline void Packet_CallFreq::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Packet

// required string name = 1;
inline bool Packet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Packet::name() const {
  return *name_;
}
inline void Packet::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Packet::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Packet::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Packet::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 time = 2;
inline bool Packet::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Packet::time() const {
  return time_;
}
inline void Packet::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 ticks = 3;
inline bool Packet::has_ticks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_ticks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_ticks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_ticks() {
  ticks_ = 0u;
  clear_has_ticks();
}
inline ::google::protobuf::uint32 Packet::ticks() const {
  return ticks_;
}
inline void Packet::set_ticks(::google::protobuf::uint32 value) {
  set_has_ticks();
  ticks_ = value;
}

// optional uint32 threads = 4;
inline bool Packet::has_threads() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_threads() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_threads() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_threads() {
  threads_ = 0u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 Packet::threads() const {
  return threads_;
}
inline void Packet::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
}

// optional uint32 processes = 5;
inline bool Packet::has_processes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet::set_has_processes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet::clear_has_processes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet::clear_processes() {
  processes_ = 0u;
  clear_has_processes();
}
inline ::google::protobuf::uint32 Packet::processes() const {
  return processes_;
}
inline void Packet::set_processes(::google::protobuf::uint32 value) {
  set_has_processes();
  processes_ = value;
}

// repeated .PBMSG.Packet.Cpu cpu = 6;
inline int Packet::cpu_size() const {
  return cpu_.size();
}
inline void Packet::clear_cpu() {
  cpu_.Clear();
}
inline const ::PBMSG::Packet_Cpu& Packet::cpu(int index) const {
  return cpu_.Get(index);
}
inline ::PBMSG::Packet_Cpu* Packet::mutable_cpu(int index) {
  return cpu_.Mutable(index);
}
inline ::PBMSG::Packet_Cpu* Packet::add_cpu() {
  return cpu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Cpu >&
Packet::cpu() const {
  return cpu_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Cpu >*
Packet::mutable_cpu() {
  return &cpu_;
}

// repeated .PBMSG.Packet.Mem mem = 7;
inline int Packet::mem_size() const {
  return mem_.size();
}
inline void Packet::clear_mem() {
  mem_.Clear();
}
inline const ::PBMSG::Packet_Mem& Packet::mem(int index) const {
  return mem_.Get(index);
}
inline ::PBMSG::Packet_Mem* Packet::mutable_mem(int index) {
  return mem_.Mutable(index);
}
inline ::PBMSG::Packet_Mem* Packet::add_mem() {
  return mem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Mem >&
Packet::mem() const {
  return mem_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Mem >*
Packet::mutable_mem() {
  return &mem_;
}

// repeated .PBMSG.Packet.Net net = 8;
inline int Packet::net_size() const {
  return net_.size();
}
inline void Packet::clear_net() {
  net_.Clear();
}
inline const ::PBMSG::Packet_Net& Packet::net(int index) const {
  return net_.Get(index);
}
inline ::PBMSG::Packet_Net* Packet::mutable_net(int index) {
  return net_.Mutable(index);
}
inline ::PBMSG::Packet_Net* Packet::add_net() {
  return net_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Net >&
Packet::net() const {
  return net_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Net >*
Packet::mutable_net() {
  return &net_;
}

// repeated .PBMSG.Packet.Disk disk = 9;
inline int Packet::disk_size() const {
  return disk_.size();
}
inline void Packet::clear_disk() {
  disk_.Clear();
}
inline const ::PBMSG::Packet_Disk& Packet::disk(int index) const {
  return disk_.Get(index);
}
inline ::PBMSG::Packet_Disk* Packet::mutable_disk(int index) {
  return disk_.Mutable(index);
}
inline ::PBMSG::Packet_Disk* Packet::add_disk() {
  return disk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Disk >&
Packet::disk() const {
  return disk_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Disk >*
Packet::mutable_disk() {
  return &disk_;
}

// repeated .PBMSG.Packet.Process process = 10;
inline int Packet::process_size() const {
  return process_.size();
}
inline void Packet::clear_process() {
  process_.Clear();
}
inline const ::PBMSG::Packet_Process& Packet::process(int index) const {
  return process_.Get(index);
}
inline ::PBMSG::Packet_Process* Packet::mutable_process(int index) {
  return process_.Mutable(index);
}
inline ::PBMSG::Packet_Process* Packet::add_process() {
  return process_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Process >&
Packet::process() const {
  return process_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_Process >*
Packet::mutable_process() {
  return &process_;
}

// repeated .PBMSG.Packet.CallFreq callfreq = 11;
inline int Packet::callfreq_size() const {
  return callfreq_.size();
}
inline void Packet::clear_callfreq() {
  callfreq_.Clear();
}
inline const ::PBMSG::Packet_CallFreq& Packet::callfreq(int index) const {
  return callfreq_.Get(index);
}
inline ::PBMSG::Packet_CallFreq* Packet::mutable_callfreq(int index) {
  return callfreq_.Mutable(index);
}
inline ::PBMSG::Packet_CallFreq* Packet::add_callfreq() {
  return callfreq_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_CallFreq >&
Packet::callfreq() const {
  return callfreq_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMSG::Packet_CallFreq >*
Packet::mutable_callfreq() {
  return &callfreq_;
}

// repeated string zonename = 12;
inline int Packet::zonename_size() const {
  return zonename_.size();
}
inline void Packet::clear_zonename() {
  zonename_.Clear();
}
inline const ::std::string& Packet::zonename(int index) const {
  return zonename_.Get(index);
}
inline ::std::string* Packet::mutable_zonename(int index) {
  return zonename_.Mutable(index);
}
inline void Packet::set_zonename(int index, const ::std::string& value) {
  zonename_.Mutable(index)->assign(value);
}
inline void Packet::set_zonename(int index, const char* value) {
  zonename_.Mutable(index)->assign(value);
}
inline void Packet::set_zonename(int index, const char* value, size_t size) {
  zonename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::add_zonename() {
  return zonename_.Add();
}
inline void Packet::add_zonename(const ::std::string& value) {
  zonename_.Add()->assign(value);
}
inline void Packet::add_zonename(const char* value) {
  zonename_.Add()->assign(value);
}
inline void Packet::add_zonename(const char* value, size_t size) {
  zonename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::zonename() const {
  return zonename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_zonename() {
  return &zonename_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMSG

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pckt_2eproto__INCLUDED
