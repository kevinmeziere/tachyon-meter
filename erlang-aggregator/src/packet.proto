// This proto file handles cases
//  where we need to split uint64_t
//  values into two uint32_t for
//  interpreters to parse correctly.
//  
//  Here, we take _1 to be the MSB (x32)
//  and _2 to be the LSB (x32)

package PB_MSG;

message Packet {

  required uint64 time = 1;
  optional uint32 ticks = 7;

  repeated Cpu cpu = 2;
  repeated Mem mem = 3;
  repeated Disk disk = 4;
  repeated Net net = 5;
  repeated Process process = 6;
  repeated CallHeat callheat = 8;

  message Process {
    optional uint32 pid = 1;
    optional string execname = 2;
    optional uint32 usage = 3;
    optional uint32 cpu = 4;
  }

  message Cpu {
    optional uint32 core = 1;
    optional uint32 usage = 2;
  }

  message Mem {
    optional uint32 physmem_1 = 1;
    optional uint32 rss_1 = 2;
    optional uint32 pp_kernel_1 = 3;
    optional uint32 freemem_1 = 4;
    optional uint32 physcap_1 = 5;
    optional uint32 swap_1 = 6;
    optional uint32 swapcap_1 = 7;
    optional uint32 physmem_2 = 8;
    optional uint32 rss_2 = 9;
    optional uint32 pp_kernel_2 = 10;
    optional uint32 freemem_2 = 11;
    optional uint32 physcap_2 = 12;
    optional uint32 swap_2 = 13;
    optional uint32 swapcap_2 = 14;
 }

  message Net {
    required string instance = 1;
    optional uint32 obytes64_1 = 2;
    optional uint32 rbytes64_1 = 3;
    optional uint32 opackets_1 = 4;
    optional uint32 ipackets_1 = 5;
    optional uint32 obytes64_2 = 6;
    optional uint32 rbytes64_2 = 7;
    optional uint32 opackets_2 = 8;
    optional uint32 ipackets_2 = 9;
  }

  message Disk {
    required uint32 instance = 1;
    optional uint32 nread_1 = 2;
    optional uint32 nwritten_1 = 3;
    optional uint32 reads = 4;
    optional uint32 writes = 5;
    optional uint32 wtime_1 = 6;
    optional uint32 wlentime_1 = 7;
    optional uint32 rtime_1 = 8;
    optional uint32 rlentime_1 = 9;
    optional uint32 nread_2 = 10;
    optional uint32 nwritten_2 = 11;
    optional uint32 wtime_2 = 12;
    optional uint32 wlentime_2 = 13;
    optional uint32 rtime_2 = 14;
    optional uint32 rlentime_2 = 15;
 }

  message CallHeat {
    required string name = 1;
    optional uint32 lowt_1 = 2;
    optional uint32 hight_1 = 3;
    optional uint32 value_1 = 4;
    optional uint32 lowt_2 = 5;
    optional uint32 hight_2 = 6;
    optional uint32 value_2 = 7;
  }

}